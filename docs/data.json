{
    "project": {
        "name": "PlatformerPlugin",
        "description": "Basic platformer plugin",
        "version": "1.0.0",
        "url": "http://kiwijs.org/"
    },
    "files": {
        "src\\States\\LoadingState.js": {
            "name": "src\\States\\LoadingState.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\States\\Platformer-1.0.0.js": {
            "name": "src\\States\\Platformer-1.0.0.js",
            "modules": {},
            "classes": {
                "PlatformState": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\game.js": {
            "name": "src\\game.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\player.js": {
            "name": "src\\player.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "PlatformState": {
            "name": "PlatformState",
            "shortname": "PlatformState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src\\States\\Platformer-1.0.0.js",
            "line": 3,
            "description": "The PlatformState in the core state that is used in the game. \n\nIt is the state where majority of the functionality occurs 'in-game' occurs.",
            "extends": "State",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "src\\States\\LoadingState.js",
            "line": 1,
            "description": "The Loading State is going to be used to load in all of the in-game assets that we need in game.\n\nBecause in this blueprint there is only a single \"Platform\" section we are going to load in all of \nthe assets at this point.",
            "class": "PlatformState"
        },
        {
            "file": "src\\States\\LoadingState.js",
            "line": 9,
            "description": "Since we want to use the custom Kiwi.JS loader with the bobbing kiwi/html5 logo and everything. We need to extend the KiwiLoadingScreen State.  \nThe KiwiLoadingScreen State is an extentsion of a normal State but it has some custom code to handle the loading/bobbing/fading of all the items, so if you override a method (like the preload) for example just make sure you call the super method.\n\nThe parameters we are passing into this method are as ordered.\n1 - name {String} Name of this state.\n2 - stateToSwitch {String} Name of the state to switch to AFTER all the assets have loaded. Note: The state you want to switch to should already have been added to the game.\n3 - dimensions {Object} A Object containing the width/height that the game is to be. For example {width: 1024, height: 768}\n4 - subfolder {String} The folder that the loading graphics are located at.",
            "class": "PlatformState"
        },
        {
            "file": "src\\States\\LoadingState.js",
            "line": 21,
            "description": "This preload method is responsible for preloading all your in game assets.",
            "itemtype": "method",
            "name": "preload",
            "access": "private",
            "tagname": "",
            "class": "PlatformState"
        },
        {
            "file": "src\\States\\Platformer-1.0.0.js",
            "line": 14,
            "description": "This create method is executed when Kiwi Game reaches the boot stage of the game loop.",
            "itemtype": "method",
            "name": "create",
            "access": "public",
            "tagname": "",
            "class": "PlatformState"
        },
        {
            "file": "src\\States\\Platformer-1.0.0.js",
            "line": 69,
            "description": "The generateTileMap method outputs and organizes tile map data",
            "itemtype": "method",
            "name": "generateTileMap",
            "access": "public",
            "tagname": "",
            "class": "PlatformState"
        },
        {
            "file": "src\\States\\Platformer-1.0.0.js",
            "line": 97,
            "description": "The generateForegroundTileMap method generates tile map data in front of the player",
            "itemtype": "method",
            "name": "generateForegroundTileMap",
            "access": "public",
            "tagname": "",
            "class": "PlatformState"
        },
        {
            "file": "src\\States\\Platformer-1.0.0.js",
            "line": 108,
            "description": "This method is the main update loop. Move scrolling items here",
            "itemtype": "method",
            "name": "update",
            "access": "public",
            "tagname": "",
            "class": "PlatformState"
        },
        {
            "file": "src\\States\\Platformer-1.0.0.js",
            "line": 172,
            "description": "This method makes the player jump when the Up key is pressed. Can jump multiple times based on the variable 'jumpCount'",
            "itemtype": "method",
            "name": "jump",
            "access": "public",
            "tagname": "",
            "class": "PlatformState"
        },
        {
            "file": "src\\States\\Platformer-1.0.0.js",
            "line": 187,
            "description": "This method checks to see if a player is on a leftSlope.\n\nPlease note, \"leftSlope\" is refering to a slope that when the player is standing on the tile, facing away from the tile, the player is facing left.\nAlso note, this function checks for the outward edges of the sloping tile and calculates those points too for a more polished slope interaction",
            "itemtype": "method",
            "name": "checkLeftSlope",
            "access": "public",
            "tagname": "",
            "class": "PlatformState"
        },
        {
            "file": "src\\States\\Platformer-1.0.0.js",
            "line": 249,
            "description": "This method checks to see if a player is on a rightSlope.\n\nPlease note, \"rightSlope\" is refering to a slope that when the player is standing on the tile, facing away from the tile, the player is facing right.\nAlso note this function checks for the outward edges of the sloping tile and calculates those points too for a more polished slope interaction",
            "itemtype": "method",
            "name": "checkRightSlope",
            "access": "public",
            "tagname": "",
            "class": "PlatformState"
        },
        {
            "file": "src\\game.js",
            "line": 2,
            "description": "The containing Platformer blueprint game file.\n\nThis file is only used to initalise (start-up) the main Kiwi Game \nand add all of the relevant states to that Game.",
            "class": ""
        },
        {
            "file": "src\\player.js",
            "line": 2,
            "description": "The player sprite\n\nThis generates an extended sprite that can use Kiwi's arcade physics.",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "Missing item type\nThe Loading State is going to be used to load in all of the in-game assets that we need in game.\n\nBecause in this blueprint there is only a single \"Platform\" section we are going to load in all of \nthe assets at this point.",
            "line": " src\\States\\LoadingState.js:1"
        },
        {
            "message": "Missing item type\nSince we want to use the custom Kiwi.JS loader with the bobbing kiwi/html5 logo and everything. We need to extend the KiwiLoadingScreen State.  \nThe KiwiLoadingScreen State is an extentsion of a normal State but it has some custom code to handle the loading/bobbing/fading of all the items, so if you override a method (like the preload) for example just make sure you call the super method.\n\nThe parameters we are passing into this method are as ordered.\n1 - name {String} Name of this state.\n2 - stateToSwitch {String} Name of the state to switch to AFTER all the assets have loaded. Note: The state you want to switch to should already have been added to the game.\n3 - dimensions {Object} A Object containing the width/height that the game is to be. For example {width: 1024, height: 768}\n4 - subfolder {String} The folder that the loading graphics are located at.",
            "line": " src\\States\\LoadingState.js:9"
        },
        {
            "message": "Missing item type\nThe containing Platformer blueprint game file.\n\nThis file is only used to initalise (start-up) the main Kiwi Game \nand add all of the relevant states to that Game.",
            "line": " src\\game.js:2"
        },
        {
            "message": "Missing item type\nThe player sprite\n\nThis generates an extended sprite that can use Kiwi's arcade physics.",
            "line": " src\\player.js:2"
        }
    ]
}